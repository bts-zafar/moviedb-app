{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Zafar Abbas\\\\Desktop\\\\moviedb-react-app-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { SEARCH_CANCEL, SEARCH_FAIL, SEARCH_QUERY_CHANGED, SEARCH_REQUEST, SEARCH_SUCCESS } from \"./search.types\";\nimport { prepareMovie } from \"../../utils\";\nimport { LOCATION_CHANGE } from 'connected-react-router';\nconst initialSearchState = {\n  query: '',\n  isFetching: false,\n  isFetched: false,\n  foundMovies: []\n}; // sub-reducer\n\nexport function searchReducer(state = initialSearchState, action) {\n  const type = action.type,\n        payload = action.payload;\n\n  switch (type) {\n    case LOCATION_CHANGE:\n      return initialSearchState;\n\n    case SEARCH_QUERY_CHANGED:\n      return _objectSpread({}, state, {\n        query: payload.query\n      });\n\n    case SEARCH_REQUEST:\n      return _objectSpread({}, state, {\n        isFetching: true,\n        isFetched: false,\n        foundMovies: []\n      });\n\n    case SEARCH_SUCCESS:\n      {\n        let movies = payload.results.map(movie => prepareMovie({\n          raw: movie,\n          posterSize: 'w154'\n        }));\n        movies = filterEmptyMovies(movies).sort((a, b) => b.popularity - a.popularity);\n        return _objectSpread({}, state, {\n          isFetching: false,\n          isFetched: true,\n          foundMovies: movies\n        });\n      }\n\n    case SEARCH_FAIL:\n    case SEARCH_CANCEL:\n      return _objectSpread({}, state, {\n        isFetching: false,\n        isFetched: false,\n        foundMovies: []\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction filterEmptyMovies(movies) {\n  return movies.filter(m => {\n    return !!m.title && m.popularity > 0.25;\n  });\n}","map":{"version":3,"sources":["C:/Users/Zafar Abbas/Desktop/moviedb-react-app-master/src/store/domains/search/search.reducer.js"],"names":["SEARCH_CANCEL","SEARCH_FAIL","SEARCH_QUERY_CHANGED","SEARCH_REQUEST","SEARCH_SUCCESS","prepareMovie","LOCATION_CHANGE","initialSearchState","query","isFetching","isFetched","foundMovies","searchReducer","state","action","type","payload","movies","results","map","movie","raw","posterSize","filterEmptyMovies","sort","a","b","popularity","filter","m","title"],"mappings":";AAAA,SAAQA,aAAR,EAAuBC,WAAvB,EAAoCC,oBAApC,EAA0DC,cAA1D,EAA0EC,cAA1E,QAA+F,gBAA/F;AACA,SAAQC,YAAR,QAA2B,aAA3B;AACA,SAAQC,eAAR,QAA8B,wBAA9B;AAEA,MAAMC,kBAAkB,GAAG;AACvBC,EAAAA,KAAK,EAAE,EADgB;AAEvBC,EAAAA,UAAU,EAAE,KAFW;AAGvBC,EAAAA,SAAS,EAAE,KAHY;AAIvBC,EAAAA,WAAW,EAAE;AAJU,CAA3B,C,CAOA;;AACA,OAAO,SAASC,aAAT,CAAuBC,KAAK,GAAGN,kBAA/B,EAAmDO,MAAnD,EAA2D;AAAA,QACvDC,IADuD,GACtCD,MADsC,CACvDC,IADuD;AAAA,QACjDC,OADiD,GACtCF,MADsC,CACjDE,OADiD;;AAE9D,UAAQD,IAAR;AACI,SAAKT,eAAL;AACI,aAAOC,kBAAP;;AACJ,SAAKL,oBAAL;AACI,+BAAWW,KAAX;AAAkBL,QAAAA,KAAK,EAAEQ,OAAO,CAACR;AAAjC;;AACJ,SAAKL,cAAL;AACI,+BAAWU,KAAX;AAAkBJ,QAAAA,UAAU,EAAE,IAA9B;AAAoCC,QAAAA,SAAS,EAAE,KAA/C;AAAsDC,QAAAA,WAAW,EAAE;AAAnE;;AACJ,SAAKP,cAAL;AAAqB;AACjB,YAAIa,MAAM,GAAGD,OAAO,CAACE,OAAR,CAAgBC,GAAhB,CAAoBC,KAAK,IAAIf,YAAY,CAAC;AAACgB,UAAAA,GAAG,EAAED,KAAN;AAAaE,UAAAA,UAAU,EAAE;AAAzB,SAAD,CAAzC,CAAb;AACAL,QAAAA,MAAM,GAAGM,iBAAiB,CAACN,MAAD,CAAjB,CAA0BO,IAA1B,CAA+B,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACC,UAAF,GAAeF,CAAC,CAACE,UAA1D,CAAT;AACA,iCACOd,KADP;AAEIJ,UAAAA,UAAU,EAAE,KAFhB;AAGIC,UAAAA,SAAS,EAAE,IAHf;AAIIC,UAAAA,WAAW,EAAEM;AAJjB;AAMH;;AACD,SAAKhB,WAAL;AACA,SAAKD,aAAL;AACI,+BAAWa,KAAX;AAAkBJ,QAAAA,UAAU,EAAE,KAA9B;AAAqCC,QAAAA,SAAS,EAAE,KAAhD;AAAuDC,QAAAA,WAAW,EAAE;AAApE;;AACJ;AACI,aAAOE,KAAP;AArBR;AAuBH;;AAED,SAASU,iBAAT,CAA2BN,MAA3B,EAAmC;AAC/B,SAAOA,MAAM,CAACW,MAAP,CAAcC,CAAC,IAAI;AACtB,WAAO,CAAC,CAACA,CAAC,CAACC,KAAJ,IAAaD,CAAC,CAACF,UAAF,GAAe,IAAnC;AACH,GAFM,CAAP;AAGH","sourcesContent":["import {SEARCH_CANCEL, SEARCH_FAIL, SEARCH_QUERY_CHANGED, SEARCH_REQUEST, SEARCH_SUCCESS} from \"./search.types\"\nimport {prepareMovie} from \"../../utils\"\nimport {LOCATION_CHANGE} from 'connected-react-router';\n\nconst initialSearchState = {\n    query: '',\n    isFetching: false,\n    isFetched: false,\n    foundMovies: []\n}\n\n// sub-reducer\nexport function searchReducer(state = initialSearchState, action) {\n    const {type, payload} = action\n    switch (type) {\n        case LOCATION_CHANGE:\n            return initialSearchState\n        case SEARCH_QUERY_CHANGED:\n            return {...state, query: payload.query}\n        case SEARCH_REQUEST:\n            return {...state, isFetching: true, isFetched: false, foundMovies: []}\n        case SEARCH_SUCCESS: {\n            let movies = payload.results.map(movie => prepareMovie({raw: movie, posterSize: 'w154'}))\n            movies = filterEmptyMovies(movies).sort((a, b) => b.popularity - a.popularity)\n            return {\n                ...state,\n                isFetching: false,\n                isFetched: true,\n                foundMovies: movies\n            }\n        }\n        case SEARCH_FAIL:\n        case SEARCH_CANCEL:\n            return {...state, isFetching: false, isFetched: false, foundMovies: []}\n        default:\n            return state\n    }\n}\n\nfunction filterEmptyMovies(movies) {\n    return movies.filter(m => {\n        return !!m.title && m.popularity > 0.25\n    })\n}\n"]},"metadata":{},"sourceType":"module"}