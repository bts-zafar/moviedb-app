{"ast":null,"code":"import axios from \"axios\";\nimport { dispatchAction, ActionTask } from \"./utils\";\nimport { CancelToken as AxiosCancelToken } from 'axios';\nconst API_KEY = \"e0d3d49d19ce926b6842e10c9d97ba31\";\nexport const MOVIEDB_MIDDLEWARE = 'MOVIEDB_MIDDLEWARE'; // ACTION SCHEMA\n// -----------\n// const example = {\n//     type: \"SEARCH_MOVIES\",\n//     payload: {\n//         // for POST method\n//         someData: {},\n//     },\n//     meta: {\n//         target: MOVIEDB_MIDDLEWARE_TARGET,\n//         url: \"popular/movie\",\n//         method: \"GET\",\n//         params: {page: 2},\n//         handlers: {\n//             request: \"SOME_ACTION_REQUEST\",\n//             success: function (dispatch, {results: movies}) {\n//                 dispatch({type: \"SOME_ACTION_SUCCESS\", payload: {movies}})\n//             },\n//             fail: [\n//                 \"ADD_ERROR\",\n//                 \"SOME_ACTION_FAIL\",\n//                 function (dispatch, {error}) {\n//                     console.error('ERROR', error)\n//                 }\n//             ],\n//             cancel: \"SOME_ACTION_CANCEL\"\n//         }\n//     }\n// }\n\nconst MiddlewareName = 'MovieDB Api Middleware';\nexport function MovieDbApiMiddleware(debug = false) {\n  return store => next => async action => {\n    const type = action.type,\n          payload = action.payload,\n          meta = action.meta;\n    if (!meta || meta.target !== MOVIEDB_MIDDLEWARE) return next(action);\n    if (!meta.handlers || !Object.keys(meta.handlers).length) return console.error(`action must contain non empty 'meta' object with at least one handler`, action);\n    const url = meta.url,\n          method = meta.method,\n          params = meta.params,\n          handlers = meta.handlers;\n    const task = meta.task || {\n      isCancelled: false,\n      isDone: false,\n      isDummy: true\n    };\n\n    const log = (msg, ...data) => console.log(`%c[${MiddlewareName}]`, 'font-weight: bold', `[${type}]${!task.isDummy ? ` [${task.id}]` : \"\"}: ${msg}`, ...data);\n\n    const cancelToken = AxiosCancelToken.source();\n    !task.isDummy && task.subscribe(ActionTask.events.CANCEL, function () {\n      cancelToken.cancel();\n      if (debug) log(`Action has been canceled`);\n      if (handlers.cancel) dispatchAction(handlers.cancel, null, store.dispatch);\n    });\n\n    if (!task.isCancelled && handlers.request) {\n      if (debug) log(`Request handling`, meta, payload);\n      dispatchAction(handlers.request, null, store.dispatch);\n    }\n\n    try {\n      let response;\n      if (method.toLowerCase() === 'get') response = await get(url, params, cancelToken); // else if () { ... }\n      else {\n          console.error('Unknown request method: ' + method, action);\n          return next(action);\n        }\n\n      if (handlers.success && !task.isCancelled) {\n        if (debug) log(`Success handling`);\n        dispatchAction(handlers.success, response.data, store.dispatch);\n      }\n    } catch (error) {\n      if (!task.isCancelled) {\n        if (debug) log(`Fail handling`, error);\n\n        if (handlers.fail) {\n          dispatchAction(handlers.fail, {\n            error\n          }, store.dispatch);\n        } else {\n          console.error(`Uncaught exception in ${MiddlewareName}: `, error);\n        }\n      }\n    } finally {\n      if (!task.isDummy && !task.isCancelled) task.done(); // TODO Should we make the task done if it is cancelled?\n      // if (task) task.done()\n    }\n  };\n}\n\nfunction get(url, params = {}, cancelToken) {\n  return axios({\n    baseURL: \"https://api.themoviedb.org/3/\",\n    url: url,\n    method: \"get\",\n    cancelToken: cancelToken.token,\n    params: Object.assign({}, {\n      api_key: API_KEY,\n      language: \"en-US\"\n    }, params),\n    timeout: 15 * 1000\n  });\n}","map":{"version":3,"sources":["C:/Users/Zafar Abbas/Desktop/moviedb-react-app-master/src/store/middlewares/moviedb-api.js"],"names":["axios","dispatchAction","ActionTask","CancelToken","AxiosCancelToken","API_KEY","MOVIEDB_MIDDLEWARE","MiddlewareName","MovieDbApiMiddleware","debug","store","next","action","type","payload","meta","target","handlers","Object","keys","length","console","error","url","method","params","task","isCancelled","isDone","isDummy","log","msg","data","id","cancelToken","source","subscribe","events","CANCEL","cancel","dispatch","request","response","toLowerCase","get","success","fail","done","baseURL","token","assign","api_key","language","timeout"],"mappings":"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","sourcesContent":["import axios from \"axios\"\nimport {dispatchAction, ActionTask} from \"./utils\"\nimport {CancelToken as AxiosCancelToken} from 'axios'\n\nconst API_KEY = \"e0d3d49d19ce926b6842e10c9d97ba31\"\n\nexport const MOVIEDB_MIDDLEWARE = 'MOVIEDB_MIDDLEWARE'\n\n// ACTION SCHEMA\n// -----------\n// const example = {\n//     type: \"SEARCH_MOVIES\",\n//     payload: {\n//         // for POST method\n//         someData: {},\n//     },\n//     meta: {\n//         target: MOVIEDB_MIDDLEWARE_TARGET,\n//         url: \"popular/movie\",\n//         method: \"GET\",\n//         params: {page: 2},\n//         handlers: {\n//             request: \"SOME_ACTION_REQUEST\",\n//             success: function (dispatch, {results: movies}) {\n//                 dispatch({type: \"SOME_ACTION_SUCCESS\", payload: {movies}})\n//             },\n//             fail: [\n//                 \"ADD_ERROR\",\n//                 \"SOME_ACTION_FAIL\",\n//                 function (dispatch, {error}) {\n//                     console.error('ERROR', error)\n//                 }\n//             ],\n//             cancel: \"SOME_ACTION_CANCEL\"\n//         }\n//     }\n// }\n\nconst MiddlewareName = 'MovieDB Api Middleware'\n\nexport function MovieDbApiMiddleware(debug = false) {\n    return store => next => async action => {\n        const {type, payload, meta} = action\n\n        if (!meta || meta.target !== MOVIEDB_MIDDLEWARE) return next(action)\n        if (!meta.handlers || !Object.keys(meta.handlers).length)\n            return console.error(`action must contain non empty 'meta' object with at least one handler`, action)\n\n        const {url, method, params, handlers} = meta\n        const task = meta.task || {isCancelled: false, isDone: false, isDummy: true}\n        const log = (msg, ...data) => console.log(\n            `%c[${MiddlewareName}]`, 'font-weight: bold',\n            `[${type}]${!task.isDummy ? ` [${task.id}]` : \"\"}: ${msg}`,\n            ...data\n        )\n\n        const cancelToken = AxiosCancelToken.source()\n        !task.isDummy && task.subscribe(ActionTask.events.CANCEL, function () {\n            cancelToken.cancel()\n            if (debug) log(`Action has been canceled`)\n            if (handlers.cancel) dispatchAction(handlers.cancel, null, store.dispatch)\n        })\n\n        if (!task.isCancelled && handlers.request) {\n            if (debug) log(`Request handling`, meta, payload)\n            dispatchAction(handlers.request, null, store.dispatch)\n        }\n\n        try {\n            let response\n            if (method.toLowerCase() === 'get') response = await get(url, params, cancelToken)\n            // else if () { ... }\n            else {\n                console.error('Unknown request method: ' + method, action)\n                return next(action)\n            }\n            if (handlers.success && !task.isCancelled) {\n                if (debug) log(`Success handling`)\n                dispatchAction(handlers.success, response.data, store.dispatch)\n            }\n        } catch (error) {\n            if (!task.isCancelled) {\n                if (debug) log(`Fail handling`, error)\n                if (handlers.fail) {\n                    dispatchAction(handlers.fail, {error}, store.dispatch)\n                } else {\n                    console.error(`Uncaught exception in ${MiddlewareName}: `, error)\n                }\n            }\n        } finally {\n            if (!task.isDummy && !task.isCancelled) task.done()\n            // TODO Should we make the task done if it is cancelled?\n            // if (task) task.done()\n        }\n    }\n\n}\n\n\nfunction get(url, params = {}, cancelToken) {\n    return axios({\n        baseURL: \"https://api.themoviedb.org/3/\",\n        url: url,\n        method: \"get\",\n        cancelToken: cancelToken.token,\n        params: Object.assign({},\n            {\n                api_key: API_KEY,\n                language: \"en-US\"\n            }, params\n        ),\n        timeout: 15 * 1000\n    })\n}\n"]},"metadata":{},"sourceType":"module"}