{"ast":null,"code":"import { ActionTask } from \"../../middlewares/utils\";\nimport { MOVIEDB_MIDDLEWARE } from \"../../middlewares/moviedb-api\";\nimport { SEARCH_CANCEL, SEARCH_FAIL, SEARCH_QUERY_CHANGED, SEARCH_REQUEST, SEARCH_SUCCESS } from \"./search.types\";\nimport { ADD_ERROR } from \"../ui/ui.types\";\nconst DUMMY_ACTION = {\n  type: \"DO_NOTHING\"\n};\nlet searchTask = {\n  isDone: true,\n  isCancelled: false\n};\nexport function searchMovies(query, page = 1) {\n  if (!query || !query.trim().length) {\n    if (!searchTask.isDone && !searchTask.isCancelled) {\n      // Cancel task and return DUMMY_ACTION\n      // because the cancel handler has already declared \n      // what to dispatch after cancel() call\n      searchTask.cancel();\n      return DUMMY_ACTION;\n    }\n\n    return cancelSearch();\n  }\n\n  if (!searchTask.isDone && !searchTask.isCancelled) cancelSearch();\n  searchTask = ActionTask();\n  return {\n    type: \"MOVIES_SEARCH\",\n    payload: null,\n    meta: {\n      target: MOVIEDB_MIDDLEWARE,\n      url: 'search/movie',\n      method: \"GET\",\n      params: {\n        query,\n        page\n      },\n      task: searchTask,\n      handlers: {\n        request: SEARCH_REQUEST,\n        success: SEARCH_SUCCESS,\n        fail: [ADD_ERROR, SEARCH_FAIL],\n        cancel: SEARCH_CANCEL\n      }\n    }\n  };\n}\nexport function cancelSearch() {\n  if (!searchTask.isDone && !searchTask.isCancelled) {\n    // Return DUMMY_ACTION because\n    // search action will automatically dispatch cancel handler\n    searchTask.cancel();\n    return DUMMY_ACTION;\n  }\n\n  return {\n    type: SEARCH_CANCEL\n  };\n}\nexport function changeQuery(value) {\n  return {\n    type: SEARCH_QUERY_CHANGED,\n    payload: {\n      query: value\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/Zafar Abbas/Desktop/Moviedb/src/store/domains/search/search.actions.js"],"names":["ActionTask","MOVIEDB_MIDDLEWARE","SEARCH_CANCEL","SEARCH_FAIL","SEARCH_QUERY_CHANGED","SEARCH_REQUEST","SEARCH_SUCCESS","ADD_ERROR","DUMMY_ACTION","type","searchTask","isDone","isCancelled","searchMovies","query","page","trim","length","cancel","cancelSearch","payload","meta","target","url","method","params","task","handlers","request","success","fail","changeQuery","value"],"mappings":"AAAA,SAAQA,UAAR,QAAyB,yBAAzB;AACA,SAAQC,kBAAR,QAAiC,+BAAjC;AACA,SAAQC,aAAR,EAAuBC,WAAvB,EAAoCC,oBAApC,EAA0DC,cAA1D,EAA0EC,cAA1E,QAA+F,gBAA/F;AACA,SAAQC,SAAR,QAAwB,gBAAxB;AAEA,MAAMC,YAAY,GAAG;AAACC,EAAAA,IAAI,EAAE;AAAP,CAArB;AAEA,IAAIC,UAAU,GAAG;AAACC,EAAAA,MAAM,EAAE,IAAT;AAAeC,EAAAA,WAAW,EAAE;AAA5B,CAAjB;AAEA,OAAO,SAASC,YAAT,CAAsBC,KAAtB,EAA6BC,IAAI,GAAG,CAApC,EAAuC;AAC1C,MAAI,CAACD,KAAD,IAAU,CAACA,KAAK,CAACE,IAAN,GAAaC,MAA5B,EAAoC;AAChC,QAAG,CAACP,UAAU,CAACC,MAAZ,IAAsB,CAACD,UAAU,CAACE,WAArC,EAAkD;AAC9C;AACA;AACA;AACAF,MAAAA,UAAU,CAACQ,MAAX;AACA,aAAOV,YAAP;AACH;;AACD,WAAOW,YAAY,EAAnB;AACH;;AACD,MAAI,CAACT,UAAU,CAACC,MAAZ,IAAsB,CAACD,UAAU,CAACE,WAAtC,EAAmDO,YAAY;AAE/DT,EAAAA,UAAU,GAAGV,UAAU,EAAvB;AAEA,SAAO;AACHS,IAAAA,IAAI,EAAE,eADH;AAEHW,IAAAA,OAAO,EAAE,IAFN;AAGHC,IAAAA,IAAI,EAAE;AACFC,MAAAA,MAAM,EAAErB,kBADN;AAEFsB,MAAAA,GAAG,EAAE,cAFH;AAGFC,MAAAA,MAAM,EAAE,KAHN;AAIFC,MAAAA,MAAM,EAAE;AAACX,QAAAA,KAAD;AAAQC,QAAAA;AAAR,OAJN;AAKFW,MAAAA,IAAI,EAAEhB,UALJ;AAMFiB,MAAAA,QAAQ,EAAE;AACNC,QAAAA,OAAO,EAAEvB,cADH;AAENwB,QAAAA,OAAO,EAAEvB,cAFH;AAGNwB,QAAAA,IAAI,EAAE,CAACvB,SAAD,EAAYJ,WAAZ,CAHA;AAINe,QAAAA,MAAM,EAAEhB;AAJF;AANR;AAHH,GAAP;AAiBH;AAED,OAAO,SAASiB,YAAT,GAAuB;AAC1B,MAAI,CAACT,UAAU,CAACC,MAAZ,IAAsB,CAACD,UAAU,CAACE,WAAtC,EAAmD;AAC/C;AACA;AACAF,IAAAA,UAAU,CAACQ,MAAX;AACA,WAAOV,YAAP;AACH;;AACD,SAAO;AAACC,IAAAA,IAAI,EAAEP;AAAP,GAAP;AACH;AAED,OAAO,SAAS6B,WAAT,CAAqBC,KAArB,EAA2B;AAC9B,SAAO;AAACvB,IAAAA,IAAI,EAAEL,oBAAP;AAA6BgB,IAAAA,OAAO,EAAE;AAACN,MAAAA,KAAK,EAAEkB;AAAR;AAAtC,GAAP;AACH","sourcesContent":["import {ActionTask} from \"../../middlewares/utils\"\nimport {MOVIEDB_MIDDLEWARE} from \"../../middlewares/moviedb-api\"\nimport {SEARCH_CANCEL, SEARCH_FAIL, SEARCH_QUERY_CHANGED, SEARCH_REQUEST, SEARCH_SUCCESS} from \"./search.types\"\nimport {ADD_ERROR} from \"../ui/ui.types\"\n\nconst DUMMY_ACTION = {type: \"DO_NOTHING\"}\n\nlet searchTask = {isDone: true, isCancelled: false}\n\nexport function searchMovies(query, page = 1) {\n    if (!query || !query.trim().length) {\n        if(!searchTask.isDone && !searchTask.isCancelled) {\n            // Cancel task and return DUMMY_ACTION\n            // because the cancel handler has already declared \n            // what to dispatch after cancel() call\n            searchTask.cancel()\n            return DUMMY_ACTION\n        }\n        return cancelSearch()\n    }\n    if (!searchTask.isDone && !searchTask.isCancelled) cancelSearch()\n\n    searchTask = ActionTask()\n\n    return {\n        type: \"MOVIES_SEARCH\",\n        payload: null,\n        meta: {\n            target: MOVIEDB_MIDDLEWARE,\n            url: 'search/movie',\n            method: \"GET\",\n            params: {query, page},\n            task: searchTask,\n            handlers: {\n                request: SEARCH_REQUEST,\n                success: SEARCH_SUCCESS,\n                fail: [ADD_ERROR, SEARCH_FAIL],\n                cancel: SEARCH_CANCEL\n            },\n        }\n    }\n}\n\nexport function cancelSearch(){\n    if (!searchTask.isDone && !searchTask.isCancelled) {\n        // Return DUMMY_ACTION because\n        // search action will automatically dispatch cancel handler\n        searchTask.cancel()\n        return DUMMY_ACTION\n    }\n    return {type: SEARCH_CANCEL}\n}\n\nexport function changeQuery(value){\n    return {type: SEARCH_QUERY_CHANGED, payload: {query: value}}\n}\n"]},"metadata":{},"sourceType":"module"}