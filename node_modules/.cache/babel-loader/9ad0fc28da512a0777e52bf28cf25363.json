{"ast":null,"code":"import{generateId}from\"../../utils/common\";/**\n * This function allows us to dispatch action(s)\n * defined in different ways through the 'next' function.\n *\n * @param {string|function|array} action\n * @param {*} payload\n * @param {function} next\n * @returns {*}\n */export function dispatchAction(action){var payload=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var next=arguments.length>2?arguments[2]:undefined;if(Array.isArray(action))return action.forEach(function(item){return dispatchAction(item,payload,next);});if(typeof action==='string'){return next({type:action,payload:payload});}else if(typeof action===\"function\"){return action(next,payload);}else{console.error('\\'action\\' prop must be a string or function, but got: '+typeof action);}}/**\n * Allows us to manage action executing in a Middleware.\n *\n * @returns {{cancel(): void, , done(): void, isCancelled: boolean, subscribe(string, function): void, unsubscribe(string, function): void, id: string, _handlers: {cancel: [], done: []}, isDone: boolean}}\n * @constructor\n */export function ActionTask(){return{id:\"TASK-\"+generateId(),isCancelled:false,isDone:false,_handlers:{cancel:[],done:[]},cancel:function cancel(){var _this=this;if(Object.isFrozen(this))return;this.isCancelled=true;this._handlers.cancel.forEach(function(h){return h&&h(_this);});},done:function done(){var _this2=this;this.isDone=true;this._handlers.done.forEach(function(h){return h&&h(_this2);});Object.freeze(this);},subscribe:function subscribe(event,handler){this._handlers[event].push(handler);},unsubscribe:function unsubscribe(event,handler){this._handlers[event]=this._handlers[event].filter(function(h){return h!==handler;});}};}ActionTask.events={DONE:'done',CANCEL:'cancel'};","map":{"version":3,"sources":["C:/Users/Zafar Abbas/Desktop/moviedb-react-app-master/src/store/middlewares/utils.js"],"names":["generateId","dispatchAction","action","payload","next","Array","isArray","forEach","item","type","console","error","ActionTask","id","isCancelled","isDone","_handlers","cancel","done","Object","isFrozen","h","freeze","subscribe","event","handler","push","unsubscribe","filter","events","DONE","CANCEL"],"mappings":"AAAA,OAAQA,UAAR,KAAyB,oBAAzB,CAEA;;;;;;;;GASA,MAAO,SAASC,CAAAA,cAAT,CAAwBC,MAAxB,CAAsD,IAAtBC,CAAAA,OAAsB,2DAAZ,IAAY,IAANC,CAAAA,IAAM,2CACzD,GAAIC,KAAK,CAACC,OAAN,CAAcJ,MAAd,CAAJ,CAA2B,MAAOA,CAAAA,MAAM,CAACK,OAAP,CAAe,SAAAC,IAAI,QAAIP,CAAAA,cAAc,CAACO,IAAD,CAAOL,OAAP,CAAgBC,IAAhB,CAAlB,EAAnB,CAAP,CAE3B,GAAI,MAAOF,CAAAA,MAAP,GAAkB,QAAtB,CAAgC,CAC5B,MAAOE,CAAAA,IAAI,CAAC,CAACK,IAAI,CAAEP,MAAP,CAAeC,OAAO,CAAPA,OAAf,CAAD,CAAX,CACH,CAFD,IAEO,IAAI,MAAOD,CAAAA,MAAP,GAAkB,UAAtB,CAAkC,CACrC,MAAOA,CAAAA,MAAM,CAACE,IAAD,CAAOD,OAAP,CAAb,CACH,CAFM,IAEA,CACHO,OAAO,CAACC,KAAR,CAAc,0DAA4D,MAAOT,CAAAA,MAAjF,EACH,CACJ,CAED;;;;;GAMA,MAAO,SAASU,CAAAA,UAAT,EAAsB,CACzB,MAAO,CACHC,EAAE,CAAE,QAAUb,UAAU,EADrB,CAEHc,WAAW,CAAE,KAFV,CAGHC,MAAM,CAAE,KAHL,CAIHC,SAAS,CAAE,CACPC,MAAM,CAAE,EADD,CAEPC,IAAI,CAAE,EAFC,CAJR,CAQHD,MARG,kBAQM,gBACL,GAAGE,MAAM,CAACC,QAAP,CAAgB,IAAhB,CAAH,CAA0B,OAC1B,KAAKN,WAAL,CAAmB,IAAnB,CACA,KAAKE,SAAL,CAAeC,MAAf,CAAsBV,OAAtB,CAA8B,SAAAc,CAAC,QAAIA,CAAAA,CAAC,EAAIA,CAAC,CAAC,KAAD,CAAV,EAA/B,EACH,CAZE,CAaHH,IAbG,gBAaI,iBACH,KAAKH,MAAL,CAAc,IAAd,CACA,KAAKC,SAAL,CAAeE,IAAf,CAAoBX,OAApB,CAA4B,SAAAc,CAAC,QAAIA,CAAAA,CAAC,EAAIA,CAAC,CAAC,MAAD,CAAV,EAA7B,EACAF,MAAM,CAACG,MAAP,CAAc,IAAd,EACH,CAjBE,CAkBHC,SAlBG,oBAkBOC,KAlBP,CAkBcC,OAlBd,CAkBuB,CACtB,KAAKT,SAAL,CAAeQ,KAAf,EAAsBE,IAAtB,CAA2BD,OAA3B,EACH,CApBE,CAqBHE,WArBG,sBAqBSH,KArBT,CAqBgBC,OArBhB,CAqByB,CACxB,KAAKT,SAAL,CAAeQ,KAAf,EAAwB,KAAKR,SAAL,CAAeQ,KAAf,EAAsBI,MAAtB,CAA6B,SAAAP,CAAC,QAAIA,CAAAA,CAAC,GAAKI,OAAV,EAA9B,CAAxB,CACH,CAvBE,CAAP,CAyBH,CAEDb,UAAU,CAACiB,MAAX,CAAoB,CAChBC,IAAI,CAAE,MADU,CAEhBC,MAAM,CAAE,QAFQ,CAApB","sourcesContent":["import {generateId} from \"../../utils/common\"\n\n/**\n * This function allows us to dispatch action(s)\n * defined in different ways through the 'next' function.\n *\n * @param {string|function|array} action\n * @param {*} payload\n * @param {function} next\n * @returns {*}\n */\nexport function dispatchAction(action, payload = null, next) {\n    if (Array.isArray(action)) return action.forEach(item => dispatchAction(item, payload, next))\n\n    if (typeof action === 'string') {\n        return next({type: action, payload})\n    } else if (typeof action === \"function\") {\n        return action(next, payload)\n    } else {\n        console.error('\\'action\\' prop must be a string or function, but got: ' + typeof action)\n    }\n}\n\n/**\n * Allows us to manage action executing in a Middleware.\n *\n * @returns {{cancel(): void, , done(): void, isCancelled: boolean, subscribe(string, function): void, unsubscribe(string, function): void, id: string, _handlers: {cancel: [], done: []}, isDone: boolean}}\n * @constructor\n */\nexport function ActionTask() {\n    return {\n        id: \"TASK-\" + generateId(),\n        isCancelled: false,\n        isDone: false,\n        _handlers: {\n            cancel: [],\n            done: [],\n        },\n        cancel() {\n            if(Object.isFrozen(this)) return\n            this.isCancelled = true\n            this._handlers.cancel.forEach(h => h && h(this))\n        },\n        done() {\n            this.isDone = true\n            this._handlers.done.forEach(h => h && h(this))\n            Object.freeze(this)\n        },\n        subscribe(event, handler) {\n            this._handlers[event].push(handler)\n        },\n        unsubscribe(event, handler) {\n            this._handlers[event] = this._handlers[event].filter(h => h !== handler)\n        }\n    }\n}\n\nActionTask.events = {\n    DONE: 'done',\n    CANCEL: 'cancel'\n}\n"]},"metadata":{},"sourceType":"module"}