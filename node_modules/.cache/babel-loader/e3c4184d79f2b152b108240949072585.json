{"ast":null,"code":"import { generateId } from \"../../utils/common\";\n/**\n * This function allows us to dispatch action(s)\n * defined in different ways through the 'next' function.\n *\n * @param {string|function|array} action\n * @param {*} payload\n * @param {function} next\n * @returns {*}\n */\n\nexport function dispatchAction(action, payload = null, next) {\n  if (Array.isArray(action)) return action.forEach(item => dispatchAction(item, payload, next));\n\n  if (typeof action === 'string') {\n    return next({\n      type: action,\n      payload\n    });\n  } else if (typeof action === \"function\") {\n    return action(next, payload);\n  } else {\n    console.error('\\'action\\' prop must be a string or function, but got: ' + typeof action);\n  }\n}\n/**\n * Allows us to manage action executing in a Middleware.\n *\n * @returns {{cancel(): void, , done(): void, isCancelled: boolean, subscribe(string, function): void, unsubscribe(string, function): void, id: string, _handlers: {cancel: [], done: []}, isDone: boolean}}\n * @constructor\n */\n\nexport function ActionTask() {\n  return {\n    id: \"TASK-\" + generateId(),\n    isCancelled: false,\n    isDone: false,\n    _handlers: {\n      cancel: [],\n      done: []\n    },\n\n    cancel() {\n      if (Object.isFrozen(this)) return;\n      this.isCancelled = true;\n\n      this._handlers.cancel.forEach(h => h && h(this));\n    },\n\n    done() {\n      this.isDone = true;\n\n      this._handlers.done.forEach(h => h && h(this));\n\n      Object.freeze(this);\n    },\n\n    subscribe(event, handler) {\n      this._handlers[event].push(handler);\n    },\n\n    unsubscribe(event, handler) {\n      this._handlers[event] = this._handlers[event].filter(h => h !== handler);\n    }\n\n  };\n}\nActionTask.events = {\n  DONE: 'done',\n  CANCEL: 'cancel'\n};","map":{"version":3,"sources":["C:/Users/Zafar Abbas/Desktop/moviedb-react-app-master/src/store/middlewares/utils.js"],"names":["generateId","dispatchAction","action","payload","next","Array","isArray","forEach","item","type","console","error","ActionTask","id","isCancelled","isDone","_handlers","cancel","done","Object","isFrozen","h","freeze","subscribe","event","handler","push","unsubscribe","filter","events","DONE","CANCEL"],"mappings":"AAAA,SAAQA,UAAR,QAAyB,oBAAzB;AAEA;;;;;;;;;;AASA,OAAO,SAASC,cAAT,CAAwBC,MAAxB,EAAgCC,OAAO,GAAG,IAA1C,EAAgDC,IAAhD,EAAsD;AACzD,MAAIC,KAAK,CAACC,OAAN,CAAcJ,MAAd,CAAJ,EAA2B,OAAOA,MAAM,CAACK,OAAP,CAAeC,IAAI,IAAIP,cAAc,CAACO,IAAD,EAAOL,OAAP,EAAgBC,IAAhB,CAArC,CAAP;;AAE3B,MAAI,OAAOF,MAAP,KAAkB,QAAtB,EAAgC;AAC5B,WAAOE,IAAI,CAAC;AAACK,MAAAA,IAAI,EAAEP,MAAP;AAAeC,MAAAA;AAAf,KAAD,CAAX;AACH,GAFD,MAEO,IAAI,OAAOD,MAAP,KAAkB,UAAtB,EAAkC;AACrC,WAAOA,MAAM,CAACE,IAAD,EAAOD,OAAP,CAAb;AACH,GAFM,MAEA;AACHO,IAAAA,OAAO,CAACC,KAAR,CAAc,4DAA4D,OAAOT,MAAjF;AACH;AACJ;AAED;;;;;;;AAMA,OAAO,SAASU,UAAT,GAAsB;AACzB,SAAO;AACHC,IAAAA,EAAE,EAAE,UAAUb,UAAU,EADrB;AAEHc,IAAAA,WAAW,EAAE,KAFV;AAGHC,IAAAA,MAAM,EAAE,KAHL;AAIHC,IAAAA,SAAS,EAAE;AACPC,MAAAA,MAAM,EAAE,EADD;AAEPC,MAAAA,IAAI,EAAE;AAFC,KAJR;;AAQHD,IAAAA,MAAM,GAAG;AACL,UAAGE,MAAM,CAACC,QAAP,CAAgB,IAAhB,CAAH,EAA0B;AAC1B,WAAKN,WAAL,GAAmB,IAAnB;;AACA,WAAKE,SAAL,CAAeC,MAAf,CAAsBV,OAAtB,CAA8Bc,CAAC,IAAIA,CAAC,IAAIA,CAAC,CAAC,IAAD,CAAzC;AACH,KAZE;;AAaHH,IAAAA,IAAI,GAAG;AACH,WAAKH,MAAL,GAAc,IAAd;;AACA,WAAKC,SAAL,CAAeE,IAAf,CAAoBX,OAApB,CAA4Bc,CAAC,IAAIA,CAAC,IAAIA,CAAC,CAAC,IAAD,CAAvC;;AACAF,MAAAA,MAAM,CAACG,MAAP,CAAc,IAAd;AACH,KAjBE;;AAkBHC,IAAAA,SAAS,CAACC,KAAD,EAAQC,OAAR,EAAiB;AACtB,WAAKT,SAAL,CAAeQ,KAAf,EAAsBE,IAAtB,CAA2BD,OAA3B;AACH,KApBE;;AAqBHE,IAAAA,WAAW,CAACH,KAAD,EAAQC,OAAR,EAAiB;AACxB,WAAKT,SAAL,CAAeQ,KAAf,IAAwB,KAAKR,SAAL,CAAeQ,KAAf,EAAsBI,MAAtB,CAA6BP,CAAC,IAAIA,CAAC,KAAKI,OAAxC,CAAxB;AACH;;AAvBE,GAAP;AAyBH;AAEDb,UAAU,CAACiB,MAAX,GAAoB;AAChBC,EAAAA,IAAI,EAAE,MADU;AAEhBC,EAAAA,MAAM,EAAE;AAFQ,CAApB","sourcesContent":["import {generateId} from \"../../utils/common\"\n\n/**\n * This function allows us to dispatch action(s)\n * defined in different ways through the 'next' function.\n *\n * @param {string|function|array} action\n * @param {*} payload\n * @param {function} next\n * @returns {*}\n */\nexport function dispatchAction(action, payload = null, next) {\n    if (Array.isArray(action)) return action.forEach(item => dispatchAction(item, payload, next))\n\n    if (typeof action === 'string') {\n        return next({type: action, payload})\n    } else if (typeof action === \"function\") {\n        return action(next, payload)\n    } else {\n        console.error('\\'action\\' prop must be a string or function, but got: ' + typeof action)\n    }\n}\n\n/**\n * Allows us to manage action executing in a Middleware.\n *\n * @returns {{cancel(): void, , done(): void, isCancelled: boolean, subscribe(string, function): void, unsubscribe(string, function): void, id: string, _handlers: {cancel: [], done: []}, isDone: boolean}}\n * @constructor\n */\nexport function ActionTask() {\n    return {\n        id: \"TASK-\" + generateId(),\n        isCancelled: false,\n        isDone: false,\n        _handlers: {\n            cancel: [],\n            done: [],\n        },\n        cancel() {\n            if(Object.isFrozen(this)) return\n            this.isCancelled = true\n            this._handlers.cancel.forEach(h => h && h(this))\n        },\n        done() {\n            this.isDone = true\n            this._handlers.done.forEach(h => h && h(this))\n            Object.freeze(this)\n        },\n        subscribe(event, handler) {\n            this._handlers[event].push(handler)\n        },\n        unsubscribe(event, handler) {\n            this._handlers[event] = this._handlers[event].filter(h => h !== handler)\n        }\n    }\n}\n\nActionTask.events = {\n    DONE: 'done',\n    CANCEL: 'cancel'\n}\n"]},"metadata":{},"sourceType":"module"}