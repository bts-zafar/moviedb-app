{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Zafar Abbas\\\\Desktop\\\\Moviedb\\\\src\\\\components\\\\Notifier.js\";\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { withSnackbar } from 'notistack';\nimport { removeError } from \"../store/domains/ui/ui.actions\";\nimport { Button } from \"@material-ui/core\";\nconst displayed = [];\n\nfunction Notifier({\n  enqueueSnackbar,\n  closeSnackbar,\n  removeError,\n  errors = []\n}) {\n  useEffect(function () {\n    errors.forEach(error => {\n      if (displayed.includes(error.id)) return;\n      enqueueSnackbar(error.message, {\n        key: error.id,\n        variant: \"error\",\n        action: key => React.createElement(Button, {\n          onClick: () => closeSnackbar(key),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 18\n          },\n          __self: this\n        }, \"OK\"),\n        onExited: (event, reason, key) => {\n          displayed.splice(displayed.indexOf(error.id), 1);\n          removeError(error);\n        }\n      });\n      displayed.push(error.id);\n    });\n  }, [errors, closeSnackbar, enqueueSnackbar, removeError]);\n  return null;\n}\n\nfunction mapStateToProps(state) {\n  return {\n    errors: state.ui.errors\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    removeError: id => dispatch(removeError(id))\n  };\n}\n\nexport default withSnackbar(connect(mapStateToProps, mapDispatchToProps)(Notifier));","map":{"version":3,"sources":["C:/Users/Zafar Abbas/Desktop/Moviedb/src/components/Notifier.js"],"names":["React","useEffect","connect","withSnackbar","removeError","Button","displayed","Notifier","enqueueSnackbar","closeSnackbar","errors","forEach","error","includes","id","message","key","variant","action","onExited","event","reason","splice","indexOf","push","mapStateToProps","state","ui","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,YAAR,QAA2B,WAA3B;AACA,SAAQC,WAAR,QAA0B,gCAA1B;AACA,SAAQC,MAAR,QAAqB,mBAArB;AAEA,MAAMC,SAAS,GAAG,EAAlB;;AAEA,SAASC,QAAT,CAAkB;AAACC,EAAAA,eAAD;AAAkBC,EAAAA,aAAlB;AAAiCL,EAAAA,WAAjC;AAA8CM,EAAAA,MAAM,GAAG;AAAvD,CAAlB,EAA8E;AAE1ET,EAAAA,SAAS,CAAC,YAAY;AAClBS,IAAAA,MAAM,CAACC,OAAP,CAAeC,KAAK,IAAI;AACpB,UAAGN,SAAS,CAACO,QAAV,CAAmBD,KAAK,CAACE,EAAzB,CAAH,EAAiC;AACjCN,MAAAA,eAAe,CAACI,KAAK,CAACG,OAAP,EAAgB;AAC3BC,QAAAA,GAAG,EAAEJ,KAAK,CAACE,EADgB;AAE3BG,QAAAA,OAAO,EAAE,OAFkB;AAG3BC,QAAAA,MAAM,EAAEF,GAAG,IACP,oBAAC,MAAD;AAAQ,UAAA,OAAO,EAAE,MAAMP,aAAa,CAACO,GAAD,CAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJuB;AAM3BG,QAAAA,QAAQ,EAAE,CAACC,KAAD,EAAQC,MAAR,EAAgBL,GAAhB,KAAwB;AAC9BV,UAAAA,SAAS,CAACgB,MAAV,CAAiBhB,SAAS,CAACiB,OAAV,CAAkBX,KAAK,CAACE,EAAxB,CAAjB,EAA8C,CAA9C;AACAV,UAAAA,WAAW,CAACQ,KAAD,CAAX;AACH;AAT0B,OAAhB,CAAf;AAWAN,MAAAA,SAAS,CAACkB,IAAV,CAAeZ,KAAK,CAACE,EAArB;AACH,KAdD;AAeH,GAhBQ,EAgBN,CAACJ,MAAD,EAASD,aAAT,EAAwBD,eAAxB,EAAyCJ,WAAzC,CAhBM,CAAT;AAkBA,SAAO,IAAP;AACH;;AAED,SAASqB,eAAT,CAAyBC,KAAzB,EAAgC;AAC5B,SAAO;AACHhB,IAAAA,MAAM,EAAEgB,KAAK,CAACC,EAAN,CAASjB;AADd,GAAP;AAGH;;AAED,SAASkB,kBAAT,CAA4BC,QAA5B,EAAsC;AAClC,SAAO;AACHzB,IAAAA,WAAW,EAAEU,EAAE,IAAIe,QAAQ,CAACzB,WAAW,CAACU,EAAD,CAAZ;AADxB,GAAP;AAGH;;AAED,eAAeX,YAAY,CAACD,OAAO,CAACuB,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CrB,QAA7C,CAAD,CAA3B","sourcesContent":["import React, {useEffect} from 'react'\nimport {connect} from 'react-redux'\nimport {withSnackbar} from 'notistack'\nimport {removeError} from \"../store/domains/ui/ui.actions\"\nimport {Button} from \"@material-ui/core\"\n\nconst displayed = []\n\nfunction Notifier({enqueueSnackbar, closeSnackbar, removeError, errors = []}) {\n\n    useEffect(function () {\n        errors.forEach(error => {\n            if(displayed.includes(error.id)) return\n            enqueueSnackbar(error.message, {\n                key: error.id,\n                variant: \"error\",\n                action: key => (\n                    <Button onClick={() => closeSnackbar(key)}>OK</Button>\n                ),\n                onExited: (event, reason, key) => {\n                    displayed.splice(displayed.indexOf(error.id), 1)\n                    removeError(error)\n                }\n            })\n            displayed.push(error.id)\n        })\n    }, [errors, closeSnackbar, enqueueSnackbar, removeError])\n\n    return null\n}\n\nfunction mapStateToProps(state) {\n    return {\n        errors: state.ui.errors\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        removeError: id => dispatch(removeError(id))\n    }\n}\n\nexport default withSnackbar(connect(mapStateToProps, mapDispatchToProps)(Notifier));\n"]},"metadata":{},"sourceType":"module"}