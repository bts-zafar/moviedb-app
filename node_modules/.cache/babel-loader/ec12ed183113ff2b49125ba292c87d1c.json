{"ast":null,"code":"import _toConsumableArray from\"C:\\\\Users\\\\Zafar Abbas\\\\Desktop\\\\Moviedb\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"C:\\\\Users\\\\Zafar Abbas\\\\Desktop\\\\Moviedb\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";// TODO Should I put this reducer in another place?\nvar moviesFetchInitialState={ids:[],isFetching:true,isFetched:false,totalMovies:0};// Sub-reducer\n// ---\n// Used for widget-like components that load list of movies.\n// The reducer keeps only the ids of movies so you should save the full data of movies in 'entities' reducer.\n// TODO Think of a better name\nexport function moviesFetchReducer(prefix){var state=arguments.length>1&&arguments[1]!==undefined?arguments[1]:moviesFetchInitialState;var action=arguments.length>2?arguments[2]:undefined;var type=action.type,payload=action.payload;switch(type){case prefix+\"_FETCH_REQUEST\":return _objectSpread({},state,{isFetching:true});case prefix+\"_FETCH_SUCCESS\":var totalMovies=payload.total_results,movies=payload.results;var movieIds=movies.map(function(movie){return movie.id;});return{ids:[].concat(_toConsumableArray(state.ids),_toConsumableArray(movieIds)),isFetching:false,isFetched:true,totalMovies:totalMovies};case prefix+\"_FETCH_FAIL\":return _objectSpread({},state,{isFetching:false,isFetched:false});default:return state;}}","map":{"version":3,"sources":["C:/Users/Zafar Abbas/Desktop/Moviedb/src/store/domains/shared.js"],"names":["moviesFetchInitialState","ids","isFetching","isFetched","totalMovies","moviesFetchReducer","prefix","state","action","type","payload","total_results","movies","results","movieIds","map","movie","id"],"mappings":"mQAAA;AAEA,GAAMA,CAAAA,uBAAuB,CAAG,CAC5BC,GAAG,CAAE,EADuB,CAE5BC,UAAU,CAAE,IAFgB,CAG5BC,SAAS,CAAE,KAHiB,CAI5BC,WAAW,CAAE,CAJe,CAAhC,CAOA;AACA;AACA;AACA;AACA;AACA,MAAO,SAASC,CAAAA,kBAAT,CAA4BC,MAA5B,CAA6E,IAAzCC,CAAAA,KAAyC,2DAAjCP,uBAAiC,IAARQ,CAAAA,MAAQ,8CACzEC,CAAAA,IADyE,CACxDD,MADwD,CACzEC,IADyE,CACnEC,OADmE,CACxDF,MADwD,CACnEE,OADmE,CAEhF,OAAQD,IAAR,EACI,IAAKH,CAAAA,MAAM,CAAG,gBAAd,CACI,wBAAWC,KAAX,EAAkBL,UAAU,CAAE,IAA9B,GACJ,IAAKI,CAAAA,MAAM,CAAG,gBAAd,IAC0BF,CAAAA,WAD1B,CAC0DM,OAD1D,CACWC,aADX,CACgDC,MADhD,CAC0DF,OAD1D,CACuCG,OADvC,CAEI,GAAMC,CAAAA,QAAQ,CAAGF,MAAM,CAACG,GAAP,CAAW,SAAAC,KAAK,QAAIA,CAAAA,KAAK,CAACC,EAAV,EAAhB,CAAjB,CACA,MAAO,CACHhB,GAAG,8BAAMM,KAAK,CAACN,GAAZ,qBAAoBa,QAApB,EADA,CAEHZ,UAAU,CAAE,KAFT,CAGHC,SAAS,CAAE,IAHR,CAIHC,WAAW,CAAEA,WAJV,CAAP,CAMJ,IAAKE,CAAAA,MAAM,CAAG,aAAd,CACI,wBAAWC,KAAX,EAAkBL,UAAU,CAAE,KAA9B,CAAqCC,SAAS,CAAE,KAAhD,GACJ,QACI,MAAOI,CAAAA,KAAP,CAfR,CAiBH","sourcesContent":["// TODO Should I put this reducer in another place?\n\nconst moviesFetchInitialState = {\n    ids: [],\n    isFetching: true,\n    isFetched: false,\n    totalMovies: 0\n}\n\n// Sub-reducer\n// ---\n// Used for widget-like components that load list of movies.\n// The reducer keeps only the ids of movies so you should save the full data of movies in 'entities' reducer.\n// TODO Think of a better name\nexport function moviesFetchReducer(prefix, state = moviesFetchInitialState, action) {\n    const {type, payload} = action\n    switch (type) {\n        case prefix + \"_FETCH_REQUEST\":\n            return {...state, isFetching: true}\n        case prefix + \"_FETCH_SUCCESS\":\n            const {total_results: totalMovies, results: movies} = payload\n            const movieIds = movies.map(movie => movie.id)\n            return {\n                ids: [...state.ids, ...movieIds],\n                isFetching: false,\n                isFetched: true,\n                totalMovies: totalMovies\n            }\n        case prefix + \"_FETCH_FAIL\":\n            return {...state, isFetching: false, isFetched: false}\n        default:\n            return state\n    }\n}\n"]},"metadata":{},"sourceType":"module"}