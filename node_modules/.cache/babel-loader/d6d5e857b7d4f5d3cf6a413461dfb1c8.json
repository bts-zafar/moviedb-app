{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\Zafar Abbas\\\\Desktop\\\\moviedb-react-app-master\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import axios from\"axios\";import{dispatchAction,ActionTask}from\"./utils\";import{CancelToken as AxiosCancelToken}from'axios';var API_KEY=\"4e44d9029b1270a757cddc766a1bcb63\";export var MOVIEDB_MIDDLEWARE='MOVIEDB_MIDDLEWARE';// ACTION SCHEMA\n// -----------\n// const example = {\n//     type: \"SEARCH_MOVIES\",\n//     payload: {\n//         // for POST method\n//         someData: {},\n//     },\n//     meta: {\n//         target: MOVIEDB_MIDDLEWARE_TARGET,\n//         url: \"popular/movie\",\n//         method: \"GET\",\n//         params: {page: 2},\n//         handlers: {\n//             request: \"SOME_ACTION_REQUEST\",\n//             success: function (dispatch, {results: movies}) {\n//                 dispatch({type: \"SOME_ACTION_SUCCESS\", payload: {movies}})\n//             },\n//             fail: [\n//                 \"ADD_ERROR\",\n//                 \"SOME_ACTION_FAIL\",\n//                 function (dispatch, {error}) {\n//                     console.error('ERROR', error)\n//                 }\n//             ],\n//             cancel: \"SOME_ACTION_CANCEL\"\n//         }\n//     }\n// }\nvar MiddlewareName='MovieDB Api Middleware';export function MovieDbApiMiddleware(){var debug=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;return function(store){return function(next){return function _callee(action){var type,payload,meta,url,method,params,handlers,task,log,cancelToken,response;return _regeneratorRuntime.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:type=action.type,payload=action.payload,meta=action.meta;if(!(!meta||meta.target!==MOVIEDB_MIDDLEWARE)){_context.next=3;break;}return _context.abrupt(\"return\",next(action));case 3:if(!(!meta.handlers||!Object.keys(meta.handlers).length)){_context.next=5;break;}return _context.abrupt(\"return\",console.error(\"action must contain non empty 'meta' object with at least one handler\",action));case 5:url=meta.url,method=meta.method,params=meta.params,handlers=meta.handlers;task=meta.task||{isCancelled:false,isDone:false,isDummy:true};log=function log(msg){var _console;for(var _len=arguments.length,data=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){data[_key-1]=arguments[_key];}return(_console=console).log.apply(_console,[\"%c[\".concat(MiddlewareName,\"]\"),'font-weight: bold',\"[\".concat(type,\"]\").concat(!task.isDummy?\" [\".concat(task.id,\"]\"):\"\",\": \").concat(msg)].concat(data));};cancelToken=AxiosCancelToken.source();!task.isDummy&&task.subscribe(ActionTask.events.CANCEL,function(){cancelToken.cancel();if(debug)log(\"Action has been canceled\");if(handlers.cancel)dispatchAction(handlers.cancel,null,store.dispatch);});if(!task.isCancelled&&handlers.request){if(debug)log(\"Request handling\",meta,payload);dispatchAction(handlers.request,null,store.dispatch);}_context.prev=11;if(!(method.toLowerCase()==='get')){_context.next=18;break;}_context.next=15;return _regeneratorRuntime.awrap(get(url,params,cancelToken));case 15:response=_context.sent;_context.next=20;break;case 18:console.error('Unknown request method: '+method,action);return _context.abrupt(\"return\",next(action));case 20:if(handlers.success&&!task.isCancelled){if(debug)log(\"Success handling\");dispatchAction(handlers.success,response.data,store.dispatch);}_context.next=26;break;case 23:_context.prev=23;_context.t0=_context[\"catch\"](11);if(!task.isCancelled){if(debug)log(\"Fail handling\",_context.t0);if(handlers.fail){dispatchAction(handlers.fail,{error:_context.t0},store.dispatch);}else{console.error(\"Uncaught exception in \".concat(MiddlewareName,\": \"),_context.t0);}}case 26:_context.prev=26;if(!task.isDummy&&!task.isCancelled)task.done();// TODO Should we make the task done if it is cancelled?\n// if (task) task.done()\nreturn _context.finish(26);case 29:case\"end\":return _context.stop();}}},null,null,[[11,23,26,29]]);};};};}function get(url){var params=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var cancelToken=arguments.length>2?arguments[2]:undefined;return axios({baseURL:\"https://api.themoviedb.org/3/\",url:url,method:\"get\",cancelToken:cancelToken.token,params:Object.assign({},{api_key:API_KEY,language:\"en-US\"},params),timeout:15*1000});}","map":{"version":3,"sources":["C:/Users/Zafar Abbas/Desktop/moviedb-react-app-master/src/store/middlewares/moviedb-api.js"],"names":["axios","dispatchAction","ActionTask","CancelToken","AxiosCancelToken","API_KEY","MOVIEDB_MIDDLEWARE","MiddlewareName","MovieDbApiMiddleware","debug","store","next","action","type","payload","meta","target","handlers","Object","keys","length","console","error","url","method","params","task","isCancelled","isDone","isDummy","log","msg","data","id","cancelToken","source","subscribe","events","CANCEL","cancel","dispatch","request","toLowerCase","get","response","success","fail","done","baseURL","token","assign","api_key","language","timeout"],"mappings":"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","sourcesContent":["import axios from \"axios\"\nimport {dispatchAction, ActionTask} from \"./utils\"\nimport {CancelToken as AxiosCancelToken} from 'axios'\n\nconst API_KEY = \"4e44d9029b1270a757cddc766a1bcb63\"\n\nexport const MOVIEDB_MIDDLEWARE = 'MOVIEDB_MIDDLEWARE'\n\n// ACTION SCHEMA\n// -----------\n// const example = {\n//     type: \"SEARCH_MOVIES\",\n//     payload: {\n//         // for POST method\n//         someData: {},\n//     },\n//     meta: {\n//         target: MOVIEDB_MIDDLEWARE_TARGET,\n//         url: \"popular/movie\",\n//         method: \"GET\",\n//         params: {page: 2},\n//         handlers: {\n//             request: \"SOME_ACTION_REQUEST\",\n//             success: function (dispatch, {results: movies}) {\n//                 dispatch({type: \"SOME_ACTION_SUCCESS\", payload: {movies}})\n//             },\n//             fail: [\n//                 \"ADD_ERROR\",\n//                 \"SOME_ACTION_FAIL\",\n//                 function (dispatch, {error}) {\n//                     console.error('ERROR', error)\n//                 }\n//             ],\n//             cancel: \"SOME_ACTION_CANCEL\"\n//         }\n//     }\n// }\n\nconst MiddlewareName = 'MovieDB Api Middleware'\n\nexport function MovieDbApiMiddleware(debug = false) {\n    return store => next => async action => {\n        const {type, payload, meta} = action\n\n        if (!meta || meta.target !== MOVIEDB_MIDDLEWARE) return next(action)\n        if (!meta.handlers || !Object.keys(meta.handlers).length)\n            return console.error(`action must contain non empty 'meta' object with at least one handler`, action)\n\n        const {url, method, params, handlers} = meta\n        const task = meta.task || {isCancelled: false, isDone: false, isDummy: true}\n        const log = (msg, ...data) => console.log(\n            `%c[${MiddlewareName}]`, 'font-weight: bold',\n            `[${type}]${!task.isDummy ? ` [${task.id}]` : \"\"}: ${msg}`,\n            ...data\n        )\n\n        const cancelToken = AxiosCancelToken.source()\n        !task.isDummy && task.subscribe(ActionTask.events.CANCEL, function () {\n            cancelToken.cancel()\n            if (debug) log(`Action has been canceled`)\n            if (handlers.cancel) dispatchAction(handlers.cancel, null, store.dispatch)\n        })\n\n        if (!task.isCancelled && handlers.request) {\n            if (debug) log(`Request handling`, meta, payload)\n            dispatchAction(handlers.request, null, store.dispatch)\n        }\n\n        try {\n            let response\n            if (method.toLowerCase() === 'get') response = await get(url, params, cancelToken)\n            // else if () { ... }\n            else {\n                console.error('Unknown request method: ' + method, action)\n                return next(action)\n            }\n            if (handlers.success && !task.isCancelled) {\n                if (debug) log(`Success handling`)\n                dispatchAction(handlers.success, response.data, store.dispatch)\n            }\n        } catch (error) {\n            if (!task.isCancelled) {\n                if (debug) log(`Fail handling`, error)\n                if (handlers.fail) {\n                    dispatchAction(handlers.fail, {error}, store.dispatch)\n                } else {\n                    console.error(`Uncaught exception in ${MiddlewareName}: `, error)\n                }\n            }\n        } finally {\n            if (!task.isDummy && !task.isCancelled) task.done()\n            // TODO Should we make the task done if it is cancelled?\n            // if (task) task.done()\n        }\n    }\n\n}\n\n\nfunction get(url, params = {}, cancelToken) {\n    return axios({\n        baseURL: \"https://api.themoviedb.org/3/\",\n        url: url,\n        method: \"get\",\n        cancelToken: cancelToken.token,\n        params: Object.assign({},\n            {\n                api_key: API_KEY,\n                language: \"en-US\"\n            }, params\n        ),\n        timeout: 15 * 1000\n    })\n}\n"]},"metadata":{},"sourceType":"module"}